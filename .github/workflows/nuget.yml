on:
  workflow_call:
    inputs:
      windows-only:
        type: boolean
        required: false
        default: false
      deploy:
        type: boolean
        required: true
      package-version:
        type: string
        required: true
      dotnet-version:
        type: string
        required: false
      dotnet-test-logger:
        type: string
        required: false
        default: GitHubActions;summary.includePassedTests=true;summary.includeSkippedTests=true

    secrets:
      CODECOV_TOKEN:
        required: false
      NUGET_TOKEN:
        required: true
      DISCORD_WEBHOOK:
        required: false

env:
  TERM: xterm
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  format:
    runs-on: ${{ inputs.windows-only && 'windows-latest' || 'ubuntu-latest' }}
    timeout-minutes: 10

    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # 4.1.0

      - name: Install .NET
        uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # 3.2.0
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      # This currently relies on an assumption that the build runs the formatting task implicitly,
      # which is the case for CSharpier, but not necessarily for other formatting tools.
      - name: Verify formatting
        run: dotnet build --configuration Release

  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        # Below is a hacky way to implement a conditional matrix
        windows-only:
          - ${{ inputs.windows-only }}
        exclude:
          - windows-only: true
            os: "ubuntu-latest"
          - windows-only: true
            os: "macos-latest"

    # Explicit name is required due to the matrix hack above
    name: test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    permissions:
      contents: read

    env:
      # Secrets can't be referenced in conditionals, but environment variables can.
      # https://github.com/github/docs/issues/6861#issuecomment-870757186
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # 4.1.0

      - name: Install .NET
        uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # 3.2.0
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Run tests
        run: >
          dotnet test
          -p:CSharpier_Bypass=true
          --configuration Release
          --logger "${{ inputs.dotnet-test-logger }}"
          --collect:"XPlat Code Coverage"
          --
          RunConfiguration.CollectSourceInformation=true
          DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: Upload coverage
        if: ${{ env.CODECOV_TOKEN }}
        uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # 3.1.4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  pack:
    runs-on: ${{ inputs.windows-only && 'windows-latest' || 'ubuntu-latest' }}
    timeout-minutes: 10

    permissions:
      actions: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # 4.1.0

      - name: Install .NET
        uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # 3.2.0
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Create packages
        run: >
          dotnet pack
          -p:Version=${{ inputs.package-version }}
          -p:CSharpier_Bypass=true
          -p:ContinuousIntegrationBuild=true
          -p:PublishRepositoryUrl=true
          -p:EmbedUntrackedSources=true
          -p:DebugType=embedded
          --configuration Release

      - name: Upload artifacts
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # 3.1.3
        with:
          name: packages
          path: "**/*.nupkg"
          if-no-files-found: error

  deploy:
    if: ${{ inputs.deploy }}

    needs:
      - format
      - test
      - pack

    timeout-minutes: 10
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: write

    steps:
      - name: Install .NET
        uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # 3.2.0
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Download artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # 3.0.2
        with:
          name: packages

      - name: Create release
        # Untagged deployments (e.g. from workflow_dispatch) don't need a full release
        if: ${{ github.ref_type == 'tag' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release create ${{ github.ref_name }}
          $(find . -type f -wholename **/*.nupkg -exec echo {} \; | tr '\n' ' ')
          --repo ${{ github.event.repository.full_name }}
          --title ${{ github.ref_name }}
          --generate-notes
          --verify-tag

      - name: Push packages
        run: >
          dotnet nuget push **/*.nupkg
          --source "https://api.nuget.org/v3/index.json"
          --api-key ${{ secrets.NUGET_TOKEN }}

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      # Secrets can't be referenced in conditionals, but environment variables can.
      # https://github.com/github/docs/issues/6861#issuecomment-870757186
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

    steps:
      - name: Notify Discord
        if: ${{ env.DISCORD_WEBHOOK }}
        uses: tyrrrz/action-http-request@64c70c67f5ebc54d4c7ea09cbe3553322778afd5 # 1.1.2
        with:
          url: ${{ secrets.DISCORD_WEBHOOK }}
          method: POST
          headers: |
            Content-Type: application/json; charset=UTF-8
          body: |
            {
              "content": "[**${{ github.event.repository.name }}**](<${{ github.event.repository.html_url }}>) v${{ inputs.package-version }} has been released!"
            }
          retry-count: 5
